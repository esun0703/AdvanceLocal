{"ast":null,"code":"var _jsxFileName = \"/Users/emilysun/AdvanceLocal/src/ResultTable/ResultTable.js\",\n  _this = this;\nimport React from 'react';\nimport './ResultTable.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultTable = _ref => {\n  let {\n    data\n  } = _ref;\n  // This isn't required but I figured it looked better.\n  const formatString = string => {\n    const firstLetter = string.charAt(0).toUpperCase();\n    const restOfWord = string.slice(1);\n    return `${firstLetter}${restOfWord}`;\n  };\n\n  // limits data just for the sake of ease, we could potentially create collapsable rows, and pagination. but for the sake of this exercise, I've just simplfied it.\n  const getLimitedData = function (data) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const limitedData = data.slice(0, limit);\n    return limitedData.map(move => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: move.move.name\n      }, `${move.move.name}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 20\n      }, _this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }, this), \") : null }\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = ResultTable;\nexport default ResultTable;\nvar _c;\n$RefreshReg$(_c, \"ResultTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ResultTable","_ref","data","formatString","string","firstLetter","charAt","toUpperCase","restOfWord","slice","getLimitedData","limit","arguments","length","undefined","limitedData","map","move","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_this","_c","$RefreshReg$"],"sources":["/Users/emilysun/AdvanceLocal/src/ResultTable/ResultTable.js"],"sourcesContent":["import React from 'react';\nimport './ResultTable.scss';\n\n\nconst ResultTable = ({data}) => {\n\n    // This isn't required but I figured it looked better.\n    const formatString = (string) => {\n        const firstLetter = string.charAt(0).toUpperCase();\n        const restOfWord = string.slice(1);\n        return `${firstLetter}${restOfWord}`;\n    }\n\n    // limits data just for the sake of ease, we could potentially create collapsable rows, and pagination. but for the sake of this exercise, I've just simplfied it.\n    const getLimitedData = (data, limit = 1) => {\n        const limitedData =  data.slice(0, limit);\n        return limitedData.map((move) => {\n            return <li key={`${move.move.name}`} >{move.move.name}</li>\n        })\n    }\n    return (\n        <table>\n            <tbody>\n        \n         </tbody>\n         <table></table>\n        \n        ) : null }\n        \n        </table>\n    )\n} \n\nexport default ResultTable"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5B,MAAMC,WAAW,GAAGC,IAAA,IAAY;EAAA,IAAX;IAACC;EAAI,CAAC,GAAAD,IAAA;EAEvB;EACA,MAAME,YAAY,GAAIC,MAAM,IAAK;IAC7B,MAAMC,WAAW,GAAGD,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAClD,MAAMC,UAAU,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC;IAClC,OAAQ,GAAEJ,WAAY,GAAEG,UAAW,EAAC;EACxC,CAAC;;EAED;EACA,MAAME,cAAc,GAAG,SAAAA,CAACR,IAAI,EAAgB;IAAA,IAAdS,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACnC,MAAMG,WAAW,GAAIb,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEE,KAAK,CAAC;IACzC,OAAOI,WAAW,CAACC,GAAG,CAAEC,IAAI,IAAK;MAC7B,oBAAOlB,OAAA;QAAAmB,QAAA,EAAgCD,IAAI,CAACA,IAAI,CAACE;MAAI,GAApC,GAAEF,IAAI,CAACA,IAAI,CAACE,IAAK,EAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAuB,CAAC;IAC/D,CAAC,CAAC;EACN,CAAC;EACD,oBACIzB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEI,CAAC,eACRxB,OAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC,cAIhB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAEhB,CAAC;AAAAE,EAAA,GA3BKzB,WAAW;AA6BjB,eAAeA,WAAW;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}