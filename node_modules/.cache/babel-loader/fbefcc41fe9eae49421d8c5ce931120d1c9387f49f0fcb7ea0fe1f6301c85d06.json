{"ast":null,"code":"var _jsxFileName = \"/Users/emilysun/AdvanceLocal/src/ResultTable/ResultTable.js\",\n  _this = this;\nimport React from 'react';\nimport './ResultTable.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultTable = _ref => {\n  var _data$types, _data$moves;\n  let {\n    data\n  } = _ref;\n  // This isn't required but I figured it looked better.\n  const formatString = string => {\n    const firstLetter = string.charAt(0).toUpperCase();\n    const restOfWord = string.slice(1);\n    return `${firstLetter}${restOfWord}`;\n  };\n\n  // limits data just for the sake of ease, we could potentially create collapsable rows, and pagination. but for the sake of this exercise, I've just simplfied it.\n  const getLimitedData = function (data) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const limitedData = data.slice(0, limit);\n    return limitedData.map(move => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: move.move.name\n      }, `${move.move.name}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 20\n      }, _this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: formatString(data === null || data === void 0 ? void 0 : data.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), (data === null || data === void 0 ? void 0 : (_data$types = data.types) === null || _data$types === void 0 ? void 0 : _data$types.length) > 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this), data.types.map(type => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: formatString(type.type.name)\n        }, formatString(type.type.name), false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 41\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this) : null, data !== null && data !== void 0 && data.weight ? /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Weight:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: data.weight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this) : null, data !== null && data !== void 0 && data.base_experience ? /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Base Experience:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: data.base_experience\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this) : null, (data === null || data === void 0 ? void 0 : (_data$moves = data.moves) === null || _data$moves === void 0 ? void 0 : _data$moves.length) > 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Moves:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: getLimitedData(data.moves, 5)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = ResultTable;\nexport default ResultTable;\nvar _c;\n$RefreshReg$(_c, \"ResultTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ResultTable","_ref","_data$types","_data$moves","data","formatString","string","firstLetter","charAt","toUpperCase","restOfWord","slice","getLimitedData","limit","arguments","length","undefined","limitedData","map","move","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_this","types","type","weight","base_experience","moves","_c","$RefreshReg$"],"sources":["/Users/emilysun/AdvanceLocal/src/ResultTable/ResultTable.js"],"sourcesContent":["import React from 'react';\nimport './ResultTable.scss';\n\n\nconst ResultTable = ({data}) => {\n\n    // This isn't required but I figured it looked better.\n    const formatString = (string) => {\n        const firstLetter = string.charAt(0).toUpperCase();\n        const restOfWord = string.slice(1);\n        return `${firstLetter}${restOfWord}`;\n    }\n\n    // limits data just for the sake of ease, we could potentially create collapsable rows, and pagination. but for the sake of this exercise, I've just simplfied it.\n    const getLimitedData = (data, limit = 1) => {\n        const limitedData =  data.slice(0, limit);\n        return limitedData.map((move) => {\n            return <li key={`${move.move.name}`} >{move.move.name}</li>\n        })\n    }\n    return (\n        <table>\n            <tbody>\n            <tr>\n                <td>Name:</td>\n                <td>{formatString(data?.name)}</td>\n            </tr>\n            { data?.types?.length > 0 ? (\n            <tr>\n                <td>Type:</td>\n                {data.types.map(type => <td key={formatString(type.type.name)}>{formatString(type.type.name)}</td>)}\n            </tr>\n            ) : null}\n            { data?.weight ? (\n            <tr>\n                <td>Weight:</td>\n                <td>{data.weight}</td>\n            </tr> \n            ) : null}\n            { data?.base_experience ? (\n            <tr>\n            <th>Base Experience:</th>\n            <td>{data.base_experience}</td>\n            </tr>\n            ) : null} \n            {data?.moves?.length > 0 ? (\n            <tr>\n                <th>Moves:</th>\n                <td>\n                    <ul>\n                        {getLimitedData(data.moves, 5)}\n                    </ul>\n                </td>\n            </tr>\n            ) : null }\n        </tbody>\n    </table>\n    )\n} \n\nexport default ResultTable"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}